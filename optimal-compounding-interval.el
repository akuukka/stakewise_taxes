(require 'cl-lib)

(defun compute-income (interest capital compound-interval compound-gas-fee)
  "Computes stakewise total yearly income"
  (let ((rewards 0.0))
    (setq day 0)
    (setq compound-counter 0)
    (setq days-until-compound compound-interval)
    (while (< day 365)
      (setq rewards (+ rewards (* capital (/ interest 365.0))  ))
      (setq days-until-compound (- days-until-compound 1))
      (when (= days-until-compound 0)
        (setq capital (+ capital (- rewards compound-gas-fee)))
        (setq rewards 0)
        (cl-incf compound-counter)
        (setq days-until-compound compound-interval))
      (cl-incf day))
    (setq total (+ capital rewards))
    total))

(compute-income 0.048 54 180 0.009)
(compute-income 0.048 54 90 0.009)
(compute-income 0.048 40 60 0.008)
(compute-income 0.048 40 30 0.008)

(defun compute-optimal-compound-interval (capital interest compound-gas-fee)
  "Computes optimal compound interval (days)."
  (setq compound-interval 365)
  (setq best-total -1.0)
  (setq best-interval -1)
  (while (> compound-interval 0)
    (let ((total (compute-income interest capital compound-interval compound-gas-fee)))
      (when (> total best-total)
        (setq best-total total)
        (setq best-interval compound-interval)))
    (cl-decf compound-interval))
  (list best-interval best-total))

(compute-optimal-compound-interval 70 0.048 0.09)
